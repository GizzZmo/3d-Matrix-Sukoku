name: Docker Build & Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend Image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.frontend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-services:
    runs-on: ubuntu-latest
    name: Build Backend Services
    strategy:
      matrix:
        service:
          - name: cpp-solver
            dockerfile: docker/Dockerfile.cpp
          - name: csharp-users
            dockerfile: docker/Dockerfile.csharp
          - name: php-leaderboard
            dockerfile: docker/Dockerfile.php
          - name: nodejs-gateway
            dockerfile: docker/Dockerfile.gateway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check if Dockerfile exists
      id: check_dockerfile
      run: |
        if [ -f "${{ matrix.service.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Dockerfile ${{ matrix.service.dockerfile }} not found, skipping"
        fi
    
    - name: Extract metadata
      if: steps.check_dockerfile.outputs.exists == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push service
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-frontend, build-services]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        # Test with docker-compose
        if [ -f "docker-compose.yml" ]; then
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30
          
          # Basic health checks
          curl --fail http://localhost:8080/health || echo "API Gateway health check failed"
          curl --fail http://localhost:4200 || echo "Frontend health check failed"
          
          # Cleanup
          docker-compose down
        else
          echo "docker-compose.yml not found, skipping integration tests"
        fi

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: [build-frontend, build-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'